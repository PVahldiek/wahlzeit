package org.wahlzeit.model;
import java.util.Objects;

/**
 * Holiday class representing holidays
 */
public class Holiday {

    protected int days;
    protected int costs;
    protected String country;

    /**
     *
     * @methodtype constructor
     */
    public Holiday(int newDays, int newCosts, String newCountry) throws AssertionError{
        days = newDays;
        costs = newCosts;
        country = newCountry;
        assertClassInvariants();
    }

    /**
     *
     * @methodtype get
     */
    public int getDays() {
        return days;
    }

    /**
     *
     * @methodtype set
     */
    public void setDays(int newDays) throws AssertionError{
        assertClassInvariants();
        days = newDays;
        assertClassInvariants();
    }

    /**
     *
     * @methodtype get
     */
    public int getCosts() {
        return costs;
    }

    /**
     *
     * @methodtype set
     */
    public void setCosts(int newCosts) throws AssertionError {
        assertClassInvariants();
        costs = newCosts;
        assertClassInvariants();
    }

    /**
     *
     * @methodtype get
     */
    public String getCountry() {
        return country;
    }

    /**
     *
     * @methodtype set
     */
    public void setCountry(String newCountry) {
        country = newCountry;
    }

    /**
     * Checks if two holidays are equal
     * @methodtype boolean
     */
    public boolean isEqual(Holiday holiday) throws IllegalArgumentException{
        assertIsNonNullArgument(holiday);
        return (days == holiday.getDays()) && (costs == holiday.getCosts()) && (country == holiday.getCountry());
    }

    /**
     * Autogenerated equals, forwarded to isEqual
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Holiday holiday = (Holiday) o;
        return isEqual(holiday);
    }

    /**
     * Autogenerated hashCode
     */
    @Override
    public int hashCode() {
        return Objects.hash(days, costs, country);
    }

    /**
     * Generic pre condition
     * @param object which is tested for null
     */
    protected void assertIsNonNullArgument(Object object) throws IllegalArgumentException{
        if(object == null)
            throw new IllegalArgumentException("Object must be not null");
    }

    /**
     * Class Invariants for Holiday (not negative)
     */
    protected void assertClassInvariants() throws AssertionError{
        assert !(days < 0) && !(costs < 0);
    }
}
