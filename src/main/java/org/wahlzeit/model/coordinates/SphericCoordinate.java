package org.wahlzeit.model.coordinates;

import java.util.Objects;

public class SphericCoordinate extends AbstractCoordinate{

    /**
     *
     */
    private double phi;
    private double theta;
    private double radius;

    /**
     * @methodtype constructor
     */
    public SphericCoordinate(double phi, double theta, double radius){
        this.phi = phi;
        this.theta = theta;
        this.radius = radius;
    }

    /**
     * Builds a CartesianCoordinate with the current SphericCoordinate
     * See also: https://de.wikipedia.org/wiki/Kugelkoordinaten
     */
    @Override
    public CartesianCoordinate asCartesianCoordinate() {
        double x = radius * Math.sin(theta) * Math.cos(phi);
        double y = radius * Math.sin(theta) * Math.sin(phi);
        double z = radius * Math.cos(theta);
        return new CartesianCoordinate(x, y, z);
    }

    /**
     * Calculates CartesianDistance using the conversion to a cartesianCoordinate
     */
    @Override
    public double getCartesianDistance(Coordinate coordinate) {
        if(coordinate == null)
            throw new NullPointerException("coordinate must not be null");
        return this.asCartesianCoordinate().getCartesianDistance(coordinate);
    }

    /**
     * Returns current SphericCoordinate Object
     */
    @Override
    public SphericCoordinate asSphericCoordinate() {
        return this;
    }

    /**
     * Calculates the centralAngle using the great-circle-distance formula
     * See also: https://en.wikipedia.org/wiki/Great-circle_distance
     */
    @Override
    public double getCentralAngle(Coordinate coordinate) {
        if(coordinate == null)
            throw new NullPointerException("coordinate must not be null");
        SphericCoordinate p1 = coordinate.asSphericCoordinate();
        if(Double.compare(radius, p1.getRadius()) != 0){
            throw new IllegalStateException("Radius must be equal for calculating distance");
        }
        return radius * Math.acos(Math.sin(phi) * Math.sin(p1.getPhi()) + Math.cos(phi) * Math.cos(p1.getPhi()) * Math.cos(p1.getTheta() - theta));
    }

    /**
     * Generic isEqual, calling overloaded specific isEqual
     */
    @Override
    public boolean isEqual(Coordinate coordinate) {
        if(coordinate == null)
            throw new NullPointerException("coordinate must not be null");
        return isEqual(coordinate.asSphericCoordinate());
    }

    /**
     * Equal-Check for SphericCoordinates. Checks if the difference between the coordinates (phi, theta, radius)
     * is lower than a given limit (in this case: 1E-7)
     * @methodtype boolean
     */
    public boolean isEqual(SphericCoordinate sphericCoordinate){
        if(sphericCoordinate == null)
            throw new NullPointerException("sphericCoordinate must not be null");
        return (Math.abs(phi - sphericCoordinate.getPhi()) < 1E-7) && (Math.abs(theta - sphericCoordinate.getTheta()) < 1E-7) && (Math.abs(radius - sphericCoordinate.getRadius()) < 1E-7);
    }

    /**
     * Autogenerated equals, forwarded to isEqual
     * @methodtype boolean
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SphericCoordinate that = (SphericCoordinate) o;
        return isEqual(that);
    }

    /**
     * Autogenerated hashCode
     */
    @Override
    public int hashCode() {
        return Objects.hash(phi, theta, radius);
    }

    /**
     *
     * @methodtype set
     */
    public void setPhi(double newPhi) {
        phi = newPhi;
    }

    /**
     *
     * @methodtype get
     */
    public double getPhi() {
        return phi;
    }

    /**
     *
     * @methodtype set
     */
    public void setTheta(double newTheta) {
        theta = newTheta;
    }

    /**
     *
     * @methodtype get
     */
    public double getTheta() {
        return theta;
    }

    /**
     *
     * @methodtype set
     */
    public void setRadius(double newRadius) {
        radius = newRadius;
    }

    /**
     *
     * @methodtype get
     */
    public double getRadius() {
        return radius;
    }
}
